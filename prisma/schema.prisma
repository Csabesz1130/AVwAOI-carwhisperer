//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                     String                  @id() @default(uuid())
  name                   String?
  email                  String?                 @unique()
  pictureUrl             String?                 @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation        String?
  stripeCustomerId       String?
  status                 UserStatus              @default(VERIFIED)
  globalRole             String                  @default("USER")
  /// @password
  /// @omit
  password               String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt()
  organizationRoles      OrganizationRole[]
  pwaSubscriptions       PwaSubscription[]       @relation("user")
  userPreferences        UserPreference[]        @relation("user")
  questionnaireResponses QuestionnaireResponse[] @relation("user")
  userCars               UserCar[]               @relation("user")
  recommendations        Recommendation[]        @relation("user")
  deals                  Deal[]                  @relation("user")
  vehicles               VehicleData[]           @relation("user")
}

/// @@allow('all', true)
model Car {
  id              String           @id() @default(uuid())
  make            String?
  model           String?
  year            Float?
  color           String?
  imageUrl        String?
  description     String?
  emissionsRating String?
  fuelEfficiency  String?
  ecoFeatures     String
  cargoSpace      Float?
  seatingCapacity Int?
  safetyRating    Float?
  maintenanceCost Float?
  engineType      String?
  horsepower      Int?
  acceleration    Float?
  topSpeed        Float?
  transmission    String?
  driveType       String?
  userCars        UserCar[]        @relation("car")
  recommendations Recommendation[] @relation("car")
  deals           Deal[]           @relation("car")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserPreference {
  id              String   @id() @default(uuid())
  preferenceType  String?
  preferenceValue String?
  userId          String
  user            User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model QuestionnaireResponse {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  userId    String
  responses String   @default("{}")
  user      User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', true)
model UserCar {
  id              String   @id() @default(uuid())
  ownershipStatus String?
  purchaseDate    String?
  userId          String
  user            User?    @relation(fields: [userId], references: [id], name: "user")
  carId           String
  car             Car?     @relation(fields: [carId], references: [id], name: "car")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Recommendation {
  id        String   @id() @default(uuid())
  reason    String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  carId     String
  car       Car?     @relation(fields: [carId], references: [id], name: "car")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Deal {
  id          String   @id() @default(uuid())
  dealPrice   String?
  dealDate    String?
  status      String?
  contractUrl String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  carId       String
  car         Car?     @relation(fields: [carId], references: [id], name: "car")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', true)
model CarTechnology {
  id          String   @id() @default(uuid())
  name        String
  description String
  imageUrl    String?
  howItWorks  String
  benefits    String
  drawbacks   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model VehicleData {
  id              String            @id @default(cuid())
  make            String
  model           String
  year            Int
  mileage         Float
  manufactureDate DateTime
  lastOilChange   DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String?
  user            User?             @relation("user", fields: [userId], references: [id])
  maintenanceEvents MaintenanceEvent[]
  drivingPatterns   DrivingPattern[]
}

model MaintenanceEvent {
  id          String      @id @default(cuid())
  vehicleId   String
  vehicle     VehicleData @relation(fields: [vehicleId], references: [id])
  type        String
  description String
  cost        Float?
  date        DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model DrivingPattern {
  id                      String      @id @default(cuid())
  vehicleId               String
  vehicle                 VehicleData @relation(fields: [vehicleId], references: [id])
  date                    DateTime
  aggressiveBrakingCount  Int         @default(0)
  aggressiveCorneringCount Int        @default(0)
  averageSpeed           Float
  distanceTraveled       Float
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
}
